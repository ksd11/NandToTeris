// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //译码
    And(a=true,b=instruction[15],out=t);
    And(a=true,b=instruction[12],out=a);
    And(a=true,b=instruction[11],out=zx);
    And(a=true,b=instruction[10],out=nx);
    And(a=true,b=instruction[9],out=zy);
    And(a=true,b=instruction[8],out=ny);
    And(a=true,b=instruction[7],out=f);
    And(a=true,b=instruction[6],out=no);
    And(a=true,b=instruction[5],out=da);
    And3(a=true,b=instruction[4],c=t,out=dd);
    And3(a=true,b=instruction[3],c=t,out=dm, out=writeM);
    And(a=true,b=instruction[2],out=jl);
    And(a=true,b=instruction[1],out=je);
    And(a=true,b=instruction[0],out=jg);

    //A 
    Mux16(a=instruction,b=outALU,sel=t,out=inputa);
    Not(in=t,out=nt);
    Or(a=nt,b=da,out=writea);
    ARegister(in=inputa,load=writea,out=outa,out[0..14]=addressM);
    Mux16(a=outa,b=inM,sel=a,out=outam);

    //D
    DRegister(in=outALU,load=dd,out=outd);

    //ALU
    ALU(x=outd,y=outam,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,out=outM,out=outALU,zr=zr,ng=ng);

    //跳转逻辑 jload
    Not(in=jl,out=njl);
    Not(in=je,out=nje);
    Not(in=jg,out=njg);
    Not(in=zr,out=nzr);
    Not(in=ng,out=nng);
    And5(a=njl,b=nje,c=jg,d=nzr,e=nng,out=jgt);
    And5(a=njl,b=je,c=njg,d=zr,e=nng,out=jeq);
    And4(a=njl,b=je,c=jg,d=nng,out=jge);
    And5(a=jl,b=nje,c=njg,d=nzr,e=ng,out=jlt);
    And4(a=jl,b=nje,c=jg,d=nzr,out=jne);
    Or(a=zr,b=ng,out=least1);
    And4(a=jl,b=je,c=njg,d=least1,out=jle);
    And3(a=jl,b=je,c=jg,out=jmp);
    Or7(a=jgt,b=jeq,c=jge,d=jlt,e=jne,f=jle,g=jmp,out=jload8);
    And(a=jload8,b=t,out=jload); //不要漏了t=1

    //pc
    PC(in=outa,load=jload,inc=true,reset=reset,out[0..14]=pc);
}