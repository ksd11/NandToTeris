// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array pixels_point;
    static int base;              //显示屏内存基址
    static int pixels_group_nums_in_row; //一行像素组数
    static int maxy, maxx;


    /** Initializes the Screen. */
    function void init() {
        let base = 16384;
        let pixels_group_nums_in_row = 32;
        let maxx = 511;
        let maxy = 255;
        let color = true;
        let pixels_point = Array.new(16);
        let pixels_point[0] = 1;
        let pixels_point[1] = 2;
        let pixels_point[2] = 4;
        let pixels_point[3] = 8;
        let pixels_point[4] = 16;
        let pixels_point[5] = 32;
        let pixels_point[6] = 64;
        let pixels_point[7] = 128;
        let pixels_point[8] = 256;
        let pixels_point[9] = 512;
        let pixels_point[10] = 1024;
        let pixels_point[11] = 2048;
        let pixels_point[12] = 4096;
        let pixels_point[13] = 8192;
        let pixels_point[14] = 16384;
        let pixels_point[15] = 32767 + 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i,j;
        let i = 0;
        while(i<32){
            let j = 0;
            while(~(j>maxy)){
                let base[i*32+j] = 0;
                let j = j+1;
            }
            let i = i+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function void set_pixel(int row,int col, int index){
        var int pixels, addr;
        let addr = base + (row * pixels_group_nums_in_row) + col;
        let pixels = Memory.peek(addr);
        if(color){
            let pixels = pixels | pixels_point[index];
        }else{
            let pixels = pixels & (~pixels_point[index]);
        }
        do Memory.poke(addr, pixels);
        return;
    }

    function void set_block(int row,int col){
        var int pixels, addr;
        let addr = base + (row * pixels_group_nums_in_row) + col;
        let pixels = Memory.peek(addr);
        if(color){
            let pixels = -1;
        }else{
            let pixels = 0;
        }
        do Memory.poke(addr, pixels);
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        do Screen.set_pixel(y, x / 16, x - (x/16*16));
        return;
    }

    function void drawLine_pos_dx_pos_dy(int x, int y, int dx, int dy){
        var int a,b;
        var int k;
        let a = 0;
        let b = 0;
        let k = 0;
        while(~(a>dx) & ~(b>dy)){
            do Screen.drawPixel(x+a,y+b);
            if(k<0){
                let a=a+1;
                let k = k+dy;
            }else{
                let b = b+1;
                let k = k-dx;
            }
        }
        return;
    }

    function void drawLine_pos_dx_neg_dy(int x, int y, int dx, int dy){
        var int a,b;
        var int k;
        let a = 0;
        let b = 0;
        let k = 0;
        while(~(a>dx) & ~(b<dy)){
            do Screen.drawPixel(x+a,y+b);
            if(k>0){
                let a=a+1;
                let k = k+dy;
            }else{
                let b = b-1;
                let k = k+dx;
            }
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int i,j,k,p;

        if(x1 = x2){
            let i = Math.min(y1,y2);
            let j = Math.max(y1,y2);
            while(~(i>j)){
                do Screen.drawPixel(x1,i);
                let i = i+1;
            }
        }else{
            if(y1 = y2){
                let i = Math.min(x1,x2);
                let j = Math.max(x1,x2);

                while(~(i>j) & ~(i - (i/16*16)=0)){ // i<= j && i%16!=0
                    do Screen.drawPixel(i,y1);
                    let i = i+1;
                }

                let p = i;
                let k = i/16;
                while(~((i+15)>j)){ // i+15<=j
                    do Screen.set_block(y1,k);
                    let i=i+16;
                    let k=k+1;
                }

                let i = Math.max(i-16+1, p);
                while(~(i>j)){ // i<= j
                    do Screen.drawPixel(i,y1);
                    let i = i+1;
                }

            }else{
                if(x1 < x2){
                    if(y1<y2){
                        do Screen.drawLine_pos_dx_pos_dy(x1,y1,x2-x1,y2-y1);
                    }else{
                        do Screen.drawLine_pos_dx_neg_dy(x1,y1,x2-x1,y2-y1);
                    }
                }else{
                    if(y2<y1){
                        do Screen.drawLine_pos_dx_pos_dy(x2,y2,x1-x2,y1-y2);
                    }else{
                        do Screen.drawLine_pos_dx_neg_dy(x2,y2,x1-x2,y1-y2);
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = y1;
        while(~(i>y2)){
            do Screen.drawLine(x1,i, x2,i);
            let i=i+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy,tmp;
        let dy = -r;
        while(~(dy>r)){
            let tmp = Math.sqrt((r*r)-(dy*dy));
            do Screen.drawLine(x-tmp, y+dy, x+tmp,y+dy);
            let dy=dy+1;
        }
        return;
    }
}
