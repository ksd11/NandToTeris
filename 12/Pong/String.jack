// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int len;  // current length
    field int mlen; //max length

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let s = Memory.alloc(maxLength);
        let mlen = maxLength;
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(s);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return Memory.peek(s + j);
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        do Memory.poke(s+j, c);
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int i, newaddress;
        if(len < mlen){
            do setCharAt(len, c);
            let len = len+1; 
        }else{
            let newaddress = Memory.alloc(Math.max(mlen * 2, 1));
            let i = 0;
            while(i<mlen){
                let newaddress[i] = s[i];
                let i = i+1;
            }
            let newaddress[mlen] = c;
            do Memory.deAlloc(s);
            let s = newaddress;
            let mlen = mlen * 2;
            let len = mlen;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, res, neg;

        let i = 0;
        let res = 0;
        let neg = 1;

        if(s[i] = 45){  // '-'
            let neg = -1;
            let i = i+1;
        }

        while(~(s[i] < 48) & ~(s[i]>57)){
            let res = res * 10 + s[i]-48;
            let i = i+1;
        }
        return res * neg;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastdigit;
        var int c;

        let len = 0;

        if(val < 0){
            do appendChar(45);
            let val = -val;
        }

        do setIntHelper(val);
        return;
    }

    // val must be positive
    method void setIntHelper(int val){
        var int lastdigit;
        var int c;

        let lastdigit = val - (val/10 * 10);
        let c = lastdigit + 48;
        if(val < 10){
            do appendChar(c);
        }else{
            do setIntHelper(val/10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
