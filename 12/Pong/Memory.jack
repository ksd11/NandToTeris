// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
// 空闲块:  size | alloc_bits 、 next 、prev
class Memory {
    static int head;
    static int tail;
    static int free;

    /** Initializes the class. */
    function void init() {
        var int size;
        let head = 2048;
        let tail = 16383;
        let free = head;
        let size = tail-head+1;
        do Memory.poke(free, size);
        do Memory.poke(free+1, 0);
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = 0;
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int length, next, prev ,cur;
        var boolean split;   //是否切割内存
        var int pointer;    //返回的位置

        let cur = free;
        let length = Memory.peek(cur);
        while(~(length>size)){
            let prev = cur;
            let cur = Memory.peek(cur+1);
            if(cur = 0){
                // 没有合适的空间了
                //do Output.printString("the memory you required is too big.");
                do Sys.error(6);
            }
            let length = Memory.peek(cur);
        }
        
        // 设置返回块的信息
        let pointer = cur+1;
        
        if(length > (size + 2)){
            let split = true;
            do Memory.poke(cur, size+1);
        }else{
            let split = false;
        }
        
        //切割
        let next = Memory.peek(cur+1);
        if(split){
            if(cur = free){
                let free = cur + size + 1;
                do Memory.poke(free, length - size -1);
                do Memory.poke(free+1, next);
            }else{
                do Memory.poke(cur+size+1, length - size -1);
                do Memory.poke(cur+size+1+1, next);
                do Memory.poke(prev+1, cur+size+1);
            }
        }else{ //不用分块
            if(cur = free){
                let free = next;
            }else{
                do Memory.poke(prev+1, next);
            }
        }

        return pointer;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

        var int segment;
        var int size;
        var int p, f;

        let p = free;
        let segment = o - 1;
        let size = o[-1];

        while(p < segment){
            let f = p;
            let p = p[1];
        }

        if( p = free){ // 待分配的块在链表最前面
            if((segment + size) = p){
                let segment[0] = size + p[0];
                let segment[1] = p[1];
            }else{
                let segment[1] = p;
            }
            let free = segment;
        }else{  // 在 f和p之间插入块
            if((f + f[0]) = segment){
                let segment = f;
                let segment[0] = f[0] + size;
            }

            if((segment + segment[0]) = p){
                let segment[0] = segment[0] + p[0];
                let segment[1] = f[1];
            }
        }

        return;

    }    
}
